import requests
import json
import os
from typing import List, Dict, Any

class GeminiClient:
    def __init__(self):
        self.api_key = "AIzaSyDbgoBre0lgxaSfNyPQPJrhChnKr2EA6_0"  # In production, use environment variable
        self.base_url = "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent"
    
    def generate_questions(self, topic: str, number_questions: int) -> List[Dict[str, Any]]:
        """
        Generate questions using Gemini LLM
        
        Args:
            topic (str): The topic for question generation
            number_questions (int): Number of questions to generate
            
        Returns:
            List[Dict]: List of generated questions with options and answers
        """
        
        prompt = f"""
        Generate {number_questions} multiple choice questions about the topic: "{topic}".
        
        Requirements:
        1. Each question should have exactly 4 options (labeled A, B, C, D)
        2. Only one option should be correct
        3. Questions should be educational and appropriate
        4. Provide the correct answer for each question
        
        Please respond in the following JSON format:
        {{
            "questions": [
                {{
                    "question": "Your question here?",
                    "options": ["Option A", "Option B", "Option C", "Option D"],
                    "answer": "Option A"
                }}
            ]
        }}
        
        Generate exactly {number_questions} questions.
        """
        
        payload = {
            "contents": [
                {
                    "parts": [
                        {
                            "text": prompt
                        }
                    ]
                }
            ]
        }
        
        headers = {
            'X-goog-api-key': self.api_key,
            'Content-Type': 'application/json'
        }
        
        try:
            response = requests.post(
                self.base_url, 
                headers=headers, 
                json=payload,
                timeout=30
            )
            response.raise_for_status()
            
            # Parse the response
            result = response.json()
            
            # Extract the generated text from Gemini response
            if 'candidates' in result and len(result['candidates']) > 0:
                generated_text = result['candidates'][0]['content']['parts'][0]['text']
                
                # Clean up the response to extract JSON
                # Remove markdown code blocks if present
                if '```json' in generated_text:
                    generated_text = generated_text.split('```json')[1].split('```')[0]
                elif '```' in generated_text:
                    generated_text = generated_text.split('```')[1].split('```')[0]
                
                # Parse the JSON response
                questions_data = json.loads(generated_text.strip())
                return questions_data.get('questions', [])
            else:
                raise Exception("No content generated by Gemini")
                
        except requests.exceptions.RequestException as e:
            raise Exception(f"Request failed: {str(e)}")
        except json.JSONDecodeError as e:
            raise Exception(f"Failed to parse JSON response: {str(e)}")
        except Exception as e:
            raise Exception(f"Error generating questions: {str(e)}")